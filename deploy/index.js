"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv").config();
const cdk = require("@aws-cdk/core");
const ec2 = require("@aws-cdk/aws-ec2");
const rds = require("@aws-cdk/aws-rds");
const ecs_patterns = require("@aws-cdk/aws-ecs-patterns");
const ecs = require("@aws-cdk/aws-ecs");
const DB_PORT = Number(process.env["DB_PORT"]);
const DB_NAME = process.env["DB_NAME"];
const DB_USER = process.env["DB_USER"];
const DB_PASSWORD = process.env["DB_PASSWORD"];
const DB_HOST = process.env["DB_HOST"];
const AUTH_KEY = process.env["AUTH_KEY"];
const SECURE_AUTH_KEY = process.env["SECURE_AUTH_KEY"];
const LOGGED_IN_KEY = process.env["LOGGED_IN_KEY"];
const NONCE_KEY = process.env["NONCE_KEY"];
const AUTH_SALT = process.env["AUTH_SALT"];
const SECURE_AUTH_SALT = process.env["SECURE_AUTH_SALT"];
const LOGGED_IN_SALT = process.env["LOGGED_IN_SALT"];
const NONCE_SALT = process.env["NONCE_SALT"];
class WordpressStack extends cdk.Stack {
    constructor(construct, id, props) {
        super(construct, id, props);
        const image = ecs.ContainerImage.fromRegistry("wordpress");
        const vpc = new ec2.Vpc(this, "vpc", {
            maxAzs: 2,
        });
        const wordpressSg = new ec2.SecurityGroup(this, "wp-sg", {
            vpc: vpc,
            description: "Wordpress security group",
        });
        new rds.DatabaseInstance(this, "db", {
            engine: rds.DatabaseInstanceEngine.MYSQL,
            masterUsername: DB_USER,
            masterUserPassword: cdk.SecretValue.plainText(DB_PASSWORD),
            instanceClass: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.SMALL),
            storageEncrypted: false,
            multiAz: false,
            autoMinorVersionUpgrade: false,
            allocatedStorage: 25,
            storageType: rds.StorageType.GP2,
            backupRetention: cdk.Duration.days(3),
            deletionProtection: false,
            databaseName: DB_NAME,
            vpc,
            securityGroups: [wordpressSg],
            port: 3306,
        });
        const cluster = new ecs.Cluster(this, "ecs-cluster", {
            vpc,
        });
        cluster.connections.addSecurityGroup(wordpressSg);
        const wordpressService = new ecs_patterns.ApplicationLoadBalancedFargateService(this, "wordpress-service", {
            cluster: cluster,
            cpu: 256,
            desiredCount: 1,
            taskImageOptions: {
                image: image,
                environment: {
                    DB_HOST: DB_HOST,
                    DB_USER: DB_USER,
                    DB_PASSWORD: DB_PASSWORD,
                    DB_NAME: DB_NAME,
                    AUTH_KEY: AUTH_KEY,
                    SECURE_AUTH_KEY: SECURE_AUTH_KEY,
                    LOGGED_IN_KEY: LOGGED_IN_KEY,
                    NONCE_KEY: NONCE_KEY,
                    AUTH_SALT: AUTH_SALT,
                    SECURE_AUTH_SALT: SECURE_AUTH_SALT,
                    LOGGED_IN_SALT: LOGGED_IN_SALT,
                    NONCE_SALT: NONCE_SALT
                },
                enableLogging: true,
            },
            memoryLimitMiB: 512,
            publicLoadBalancer: true,
        });
        wordpressService.service.connections.allowTo(wordpressSg, ec2.Port.tcp(DB_PORT));
    }
}
const app = new cdk.App();
new WordpressStack(app, "FormsStackWP", {
    env: {
        account: process.env.AWS_ACCOUNT_ID,
        region: process.env.AWS_REGION,
    },
    description: "Fargate WordPress deployment",
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMzQixxQ0FBcUM7QUFDckMsd0NBQXdDO0FBQ3hDLHdDQUF3QztBQUN4QywwREFBMEQ7QUFDMUQsd0NBQXdDO0FBRXhDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFXLENBQUM7QUFDekQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQVcsQ0FBQztBQUNqRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBVyxDQUFDO0FBQ2pELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFXLENBQUM7QUFDekQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQVcsQ0FBQztBQUVqRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBVyxDQUFDO0FBQ25ELE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQVcsQ0FBQztBQUNqRSxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBVyxDQUFDO0FBQzdELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFXLENBQUM7QUFDckQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQVcsQ0FBQztBQUNyRCxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQVcsQ0FBQztBQUNuRSxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFXLENBQUM7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MUMsV0FBVyxFQUNYLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUN0QixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRTtJQUN0QyxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1FBQ25DLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7S0FDL0I7SUFDRCxXQUFXLEVBQUUsOEJBQThCO0NBQzVDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoXCJkb3RlbnZcIikuY29uZmlnKCk7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSBcIkBhd3MtY2RrL2NvcmVcIjtcbmltcG9ydCAqIGFzIGVjMiBmcm9tIFwiQGF3cy1jZGsvYXdzLWVjMlwiO1xuaW1wb3J0ICogYXMgcmRzIGZyb20gXCJAYXdzLWNkay9hd3MtcmRzXCI7XG5pbXBvcnQgKiBhcyBlY3NfcGF0dGVybnMgZnJvbSBcIkBhd3MtY2RrL2F3cy1lY3MtcGF0dGVybnNcIjtcbmltcG9ydCAqIGFzIGVjcyBmcm9tIFwiQGF3cy1jZGsvYXdzLWVjc1wiO1xuXG5jb25zdCBEQl9QT1JUID0gTnVtYmVyKHByb2Nlc3MuZW52W1wiREJfUE9SVFwiXSkgYXMgbnVtYmVyO1xuY29uc3QgREJfTkFNRSA9IHByb2Nlc3MuZW52W1wiREJfTkFNRVwiXSBhcyBzdHJpbmc7XG5jb25zdCBEQl9VU0VSID0gcHJvY2Vzcy5lbnZbXCJEQl9VU0VSXCJdIGFzIHN0cmluZztcbmNvbnN0IERCX1BBU1NXT1JEID0gcHJvY2Vzcy5lbnZbXCJEQl9QQVNTV09SRFwiXSBhcyBzdHJpbmc7XG5jb25zdCBEQl9IT1NUID0gcHJvY2Vzcy5lbnZbXCJEQl9IT1NUXCJdIGFzIHN0cmluZztcblxuY29uc3QgQVVUSF9LRVkgPSBwcm9jZXNzLmVudltcIkFVVEhfS0VZXCJdIGFzIHN0cmluZztcbmNvbnN0IFNFQ1VSRV9BVVRIX0tFWSA9IHByb2Nlc3MuZW52W1wiU0VDVVJFX0FVVEhfS0VZXCJdIGFzIHN0cmluZztcbmNvbnN0IExPR0dFRF9JTl9LRVkgPSBwcm9jZXNzLmVudltcIkxPR0dFRF9JTl9LRVlcIl0gYXMgc3RyaW5nO1xuY29uc3QgTk9OQ0VfS0VZID0gcHJvY2Vzcy5lbnZbXCJOT05DRV9LRVlcIl0gYXMgc3RyaW5nO1xuY29uc3QgQVVUSF9TQUxUID0gcHJvY2Vzcy5lbnZbXCJBVVRIX1NBTFRcIl0gYXMgc3RyaW5nO1xuY29uc3QgU0VDVVJFX0FVVEhfU0FMVCA9IHByb2Nlc3MuZW52W1wiU0VDVVJFX0FVVEhfU0FMVFwiXSBhcyBzdHJpbmc7XG5jb25zdCBMT0dHRURfSU5fU0FMVCA9IHByb2Nlc3MuZW52W1wiTE9HR0VEX0lOX1NBTFRcIl0gYXMgc3RyaW5nO1xuY29uc3QgTk9OQ0VfU0FMVCA9IHByb2Nlc3MuZW52W1wiTk9OQ0VfU0FMVFwiXSBhcyBzdHJpbmc7XG5cbmNsYXNzIFdvcmRwcmVzc1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3IoY29uc3RydWN0OiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoY29uc3RydWN0LCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgaW1hZ2UgPSBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KFwid29yZHByZXNzXCIpO1xuXG4gICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGModGhpcywgXCJ2cGNcIiwge1xuICAgICAgbWF4QXpzOiAyLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgd29yZHByZXNzU2cgPSBuZXcgZWMyLlNlY3VyaXR5R3JvdXAodGhpcywgXCJ3cC1zZ1wiLCB7XG4gICAgICB2cGM6IHZwYyxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIldvcmRwcmVzcyBzZWN1cml0eSBncm91cFwiLFxuICAgIH0pO1xuXG4gICAgbmV3IHJkcy5EYXRhYmFzZUluc3RhbmNlKHRoaXMsIFwiZGJcIiwge1xuICAgICAgZW5naW5lOiByZHMuRGF0YWJhc2VJbnN0YW5jZUVuZ2luZS5NWVNRTCxcbiAgICAgIG1hc3RlclVzZXJuYW1lOiBEQl9VU0VSLFxuICAgICAgbWFzdGVyVXNlclBhc3N3b3JkOiBjZGsuU2VjcmV0VmFsdWUucGxhaW5UZXh0KERCX1BBU1NXT1JEKSxcbiAgICAgIGluc3RhbmNlQ2xhc3M6IGVjMi5JbnN0YW5jZVR5cGUub2YoXG4gICAgICAgIGVjMi5JbnN0YW5jZUNsYXNzLlQyLFxuICAgICAgICBlYzIuSW5zdGFuY2VTaXplLlNNQUxMXG4gICAgICApLFxuICAgICAgc3RvcmFnZUVuY3J5cHRlZDogZmFsc2UsXG4gICAgICBtdWx0aUF6OiBmYWxzZSxcbiAgICAgIGF1dG9NaW5vclZlcnNpb25VcGdyYWRlOiBmYWxzZSxcbiAgICAgIGFsbG9jYXRlZFN0b3JhZ2U6IDI1LFxuICAgICAgc3RvcmFnZVR5cGU6IHJkcy5TdG9yYWdlVHlwZS5HUDIsXG4gICAgICBiYWNrdXBSZXRlbnRpb246IGNkay5EdXJhdGlvbi5kYXlzKDMpLFxuICAgICAgZGVsZXRpb25Qcm90ZWN0aW9uOiBmYWxzZSxcbiAgICAgIGRhdGFiYXNlTmFtZTogREJfTkFNRSxcbiAgICAgIHZwYyxcbiAgICAgIHNlY3VyaXR5R3JvdXBzOiBbd29yZHByZXNzU2ddLFxuICAgICAgcG9ydDogMzMwNixcbiAgICB9KTtcblxuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIodGhpcywgXCJlY3MtY2x1c3RlclwiLCB7XG4gICAgICB2cGMsXG4gICAgfSk7XG5cbiAgICBjbHVzdGVyLmNvbm5lY3Rpb25zLmFkZFNlY3VyaXR5R3JvdXAod29yZHByZXNzU2cpO1xuXG4gICAgY29uc3Qgd29yZHByZXNzU2VydmljZSA9IG5ldyBlY3NfcGF0dGVybnMuQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShcbiAgICAgIHRoaXMsXG4gICAgICBcIndvcmRwcmVzcy1zZXJ2aWNlXCIsXG4gICAgICB7XG4gICAgICAgIGNsdXN0ZXI6IGNsdXN0ZXIsIC8vIFJlcXVpcmVkXG4gICAgICAgIGNwdTogMjU2LCAvLyBEZWZhdWx0IGlzIDI1NlxuICAgICAgICBkZXNpcmVkQ291bnQ6IDEsIC8vIERlZmF1bHQgaXMgMSxcbiAgICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICAgIGltYWdlOiBpbWFnZSxcbiAgICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgREJfSE9TVDogREJfSE9TVCwgLy8gZGIuZGJJbnN0YW5jZUVuZHBvaW50QWRkcmVzcyxcbiAgICAgICAgICAgIERCX1VTRVI6IERCX1VTRVIsXG4gICAgICAgICAgICBEQl9QQVNTV09SRDogREJfUEFTU1dPUkQsXG4gICAgICAgICAgICBEQl9OQU1FOiBEQl9OQU1FLFxuICAgICAgICAgICAgQVVUSF9LRVk6IEFVVEhfS0VZLFxuICAgICAgICAgICAgU0VDVVJFX0FVVEhfS0VZOiBTRUNVUkVfQVVUSF9LRVksXG4gICAgICAgICAgICBMT0dHRURfSU5fS0VZOiBMT0dHRURfSU5fS0VZLFxuICAgICAgICAgICAgTk9OQ0VfS0VZOiBOT05DRV9LRVksXG4gICAgICAgICAgICBBVVRIX1NBTFQ6IEFVVEhfU0FMVCxcbiAgICAgICAgICAgIFNFQ1VSRV9BVVRIX1NBTFQ6IFNFQ1VSRV9BVVRIX1NBTFQsXG4gICAgICAgICAgICBMT0dHRURfSU5fU0FMVDogTE9HR0VEX0lOX1NBTFQsXG4gICAgICAgICAgICBOT05DRV9TQUxUOiBOT05DRV9TQUxUXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbmFibGVMb2dnaW5nOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBtZW1vcnlMaW1pdE1pQjogNTEyLCAvLyBEZWZhdWx0IGlzIDUxMlxuICAgICAgICBwdWJsaWNMb2FkQmFsYW5jZXI6IHRydWUsIC8vIERlZmF1bHQgaXMgZmFsc2UsXG4gICAgICB9XG4gICAgKTtcblxuICAgIHdvcmRwcmVzc1NlcnZpY2Uuc2VydmljZS5jb25uZWN0aW9ucy5hbGxvd1RvKFxuICAgICAgd29yZHByZXNzU2csXG4gICAgICBlYzIuUG9ydC50Y3AoREJfUE9SVClcbiAgICApO1xuICB9XG59XG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IFdvcmRwcmVzc1N0YWNrKGFwcCwgXCJGb3Jtc1N0YWNrV1BcIiwge1xuICBlbnY6IHtcbiAgICBhY2NvdW50OiBwcm9jZXNzLmVudi5BV1NfQUNDT1VOVF9JRCxcbiAgICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04sXG4gIH0sXG4gIGRlc2NyaXB0aW9uOiBcIkZhcmdhdGUgV29yZFByZXNzIGRlcGxveW1lbnRcIixcbn0pO1xuIl19